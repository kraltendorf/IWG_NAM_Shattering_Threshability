data %>% group_by(ID, run) %>% tally()
data$run
View(data$run)
data %>% group_by(ID, run) %>% tally()
data
mutate(inoc_date - rate_date)
data %>% mutate(inoc_date - rate_date)
data %>% mutate(diff = inoc_date - rate_date)
test <- data %>% mutate(diff = inoc_date - rate_date)
test$diff
summary(test$diff)
unique(test$diff)
hist(data$percent_sporulating)
hist(data$leaf)
hist(data$percent_lesion)
hist(data$percent_lesion)
hist(data$percent_sporulating)
hist(data$percent_lesion)
hist(data$percent_sporulating)
hist(data$percent_lesion)
colnames(data)
data %>% group_by(ID, run) %>% tally()
View(data %>% group_by(ID, run) %>% tally())
data$run
data$node
distinct(data$node)
distinct(data$node)
(data$node)
summary(data$node)
summary(as.factor(data$node))
data$ID
unique(data$ID)
data %>% group_by(rate_date, ID) %>% tally()
data %>% group_by(ID, rate_date) %>% tally()
View(data %>% group_by(ID, rate_date) %>% tally())
data$other
distinct(data$other)
unqiue(data$other)
unique(data$other)
data %>% filter(other != "John did not genotype")
<- data %>% filter(other != "John did not genotype") %>% select(-other)
data <- data %>% filter(other != "John did not genotype") %>% select(-other)
data
unique(data$ID)
length(unique(data$ID))
# read in data
data <- read_excel(paste(dir, folder, "data/Mapping Population Full Datasheet February 8th, 2021.xlsx", sep = "/"), na = c("", "."), sheet = "Downy")
colnames(data) <- c("inoc_date", "rate_date", "ID", "run", "bench", "node", "leaf", "percent_sporulating", "percent_lesion", "notes", "other")
length(data$ID)
length(unique(data$ID))
# read in data
data <- read_excel(paste(dir, folder, "data/Mapping Population Full Datasheet February 8th, 2021.xlsx", sep = "/"), na = c("", "."), sheet = "Downy")
colnames(data) <- c("inoc_date", "rate_date", "ID", "run", "bench", "node", "leaf", "percent_sporulating", "percent_lesion", "notes", "other")
data <- data %>% filter(other != "John did not genotype") %>% select(-other)
data
length(unqiue(data$ID))
length(unique(data$ID))
# all together
outfile = file.path(file="./all.pdf")
mirror <- c(rep(c(FALSE, TRUE), 21))
lg_list <- c('Chr01', 'LG01', 'Chr04', 'LG04', 'Chr07', 'LG07', 'Chr10', 'LG10',
'Chr13', 'LG13', 'Chr16', 'LG16', 'Chr19', 'LG19', 'Chr02', 'LG02', 'Chr05', 'LG05', 'Chr08', 'LG08',  'Chr11', 'LG11', 'Chr14', 'LG14', 'Chr17', 'LG17', 'Chr20', 'LG20',
'Chr03', 'LG03', 'Chr06', 'LG06', 'Chr09', 'LG09',  'Chr12', 'LG12', 'Chr15', 'LG15', 'Chr18', 'LG18', 'Chr21', 'LG21')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=16,pdf.width = 25,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtl_ed,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
getwd()
# ROW 1
outfile = file.path(file="./row_1.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr01', 'LG01', 'Chr04', 'LG04', 'Chr07', 'LG07', 'Chr10', 'LG10',
'Chr13', 'LG13', 'Chr16', 'LG16', 'Chr19', 'LG19')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4, pdf.width = 24,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
# ROW 2
outfile = file.path(file="./row_2.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr02', 'LG02', 'Chr05', 'LG05', 'Chr08', 'LG08',  'Chr11', 'LG11', 'Chr14', 'LG14', 'Chr17', 'LG17', 'Chr20', 'LG20')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4, pdf.width = 24,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
# ROW 3
outfile = file.path(file="./row_3.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr03', 'LG03', 'Chr06', 'LG06', 'Chr09', 'LG09',  'Chr12', 'LG12', 'Chr15', 'LG15', 'Chr18', 'LG18', 'Chr21', 'LG21')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4,pdf.width = 24,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
# all together
outfile = file.path(file="./all.pdf")
# ROW 2
outfile = file.path(file="./row_2.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr02', 'LG02', 'Chr05', 'LG05', 'Chr08', 'LG08',  'Chr11', 'LG11', 'Chr14', 'LG14', 'Chr17', 'LG17', 'Chr20', 'LG20')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4, pdf.width = 30,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
setwd("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Shattering and Threshability/Submission/Figures/")
# ROW 1
outfile = file.path(file="./row_1.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr01', 'LG01', 'Chr04', 'LG04', 'Chr07', 'LG07', 'Chr10', 'LG10',
'Chr13', 'LG13', 'Chr16', 'LG16', 'Chr19', 'LG19')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4, pdf.width = 30,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
# ROW 2
outfile = file.path(file="./row_2.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr02', 'LG02', 'Chr05', 'LG05', 'Chr08', 'LG08',  'Chr11', 'LG11', 'Chr14', 'LG14', 'Chr17', 'LG17', 'Chr20', 'LG20')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4, pdf.width = 30,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
# ROW 3
outfile = file.path(file="./row_3.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr03', 'LG03', 'Chr06', 'LG06', 'Chr09', 'LG09',  'Chr12', 'LG12', 'Chr15', 'LG15', 'Chr18', 'LG18', 'Chr21', 'LG21')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4,pdf.width = 30,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
setwd("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Shattering and Threshability/Submission/Figures/")
# ROW 1
outfile = file.path(file="./row_1.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr01', 'LG01', 'Chr04', 'LG04', 'Chr07', 'LG07', 'Chr10', 'LG10',
'Chr13', 'LG13', 'Chr16', 'LG16', 'Chr19', 'LG19')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4, pdf.width = 25,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
# ROW 2
outfile = file.path(file="./row_2.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr02', 'LG02', 'Chr05', 'LG05', 'Chr08', 'LG08',  'Chr11', 'LG11', 'Chr14', 'LG14', 'Chr17', 'LG17', 'Chr20', 'LG20')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4, pdf.width = 30,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
# ROW 3
outfile = file.path(file="./row_3.pdf")
mirror <- c(rep(c(FALSE, TRUE), 7))
lg_list <- c('Chr03', 'LG03', 'Chr06', 'LG06', 'Chr09', 'LG09',  'Chr12', 'LG12', 'Chr15', 'LG15', 'Chr18', 'LG18', 'Chr21', 'LG21')
lmv.linkage.plot(lmv_dat, outfile,
mapthese=lg_list,
showonly=names,ruler=TRUE,posonleft=mirror,labdist=0.1,lgw=0.2,
pdf.height=4,pdf.width = 25,
pdf.pointsize=10,maxnbrcolsfordups=1,markerformatlist=flist,qtldf = combined_qtldf,
lgperrow=14,
par(lwd=0.25),lty.axis=0.5)
gwas_hits$trait)
gwas_hits$trait
# rename traits
trait_names <- data.frame(trait = unique(gwas_hits$trait), trait2 = c("BTR", "FLSH", "THRESH"))
trait_names
# rename traits
trait_names <- data.frame(trait = unique(gwas_hits$trait), trait2 = c("BTR", "FLSH", "THRS"))
trait_names
# rename traits
trait_names <- data.frame(trait = unique(gwas_hits$trait), trait2 = c("BTR", "FLSH", "THRS"))
trait_names
trait_names
# rename traits
trait_names <- data.frame(trait = unique(gwas_hits$trait), trait2 = c("BTR", "FLSH", "THRS"))
gwas_hits2 <- left_join(gwas_hits, trait_names, by = "trait") %>%
mutate(marker_name = paste(trait2, " (", envs, ")", sep = "")) %>%
dplyr::select(-envs) %>%
rename(chr = Chromosome,
bp_pos = Position) %>%
mutate(cm_pos = NA,
group = paste("Chr", str_pad(string = chr, width = 2, side = "left", pad = "0"), sep = ""),
bp_pos = as.numeric(bp_pos),
display = "gwas_qtl") %>%
dplyr::select(marker_name, cm_pos, group, bp_pos, chr, display, trait2) %>%
arrange(trait2, group, bp_pos)
gwas_hits2 %>% group_by(marker_name, chr) %>% tally() %>% arrange(-n)
gwas_hits2 %>% group_by(marker_name, chr) %>% tally() %>% arrange(-n)
# write this out, and manually edit it to make sure there are no repeats on a chromosome,
# if there are, add a "1_" before the marker name to make sure they show up independently on the figure
# rename with "_ed" and read back in
write.csv(gwas_hits2, "/Users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Domestication Traits/Scripts for Github/Visualize Results/output/gwas_hits_formatted.csv", row.names = F)
# load required packages
library("dplyr")
library("tidyr")
# location of the github directory
dir <- "/users/kayla.altendorf/OneDrive - USDA/Publications/IWG_NAM_Shattering_Threshability/Scripts for Github/"
# folder we're on
folder <- "/Preparing .qua Files for MapQTL"
# declare where you want the output to go
out_path <- paste(dir, folder, "/output", sep = "")
in_path <- paste(dir, folder, "/data", sep = "")
# prepare backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/data/backbone.csv", sep = "/"))
dir
# prepare backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/data/backbone.csv", sep = "/"))
# location of the github directory
dir <- "/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Shattering and Threshability/Scripts for Github/"
# folder we're on
folder <- "/Preparing .qua Files for MapQTL"
# declare where you want the output to go
out_path <- paste(dir, folder, "/output", sep = "")
in_path <- paste(dir, folder, "/data", sep = "")
# prepare backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/data/backbone.csv", sep = "/"))
backbone1 <- backbone %>% select(famID, parent, plantID, plantID3, longID) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>%
distinct() %>%
select(-plantID3, -famID)
# set vectors
famID <- unique(backbone$famID)
traits <- c("rachis_breaks_mean", "floret_score_mean", "threshability")
env_names <- c("stp17", "stp18", "tli17", "tli18")
# create output
output <- list()
# import and prepare files
for (i in 1:length(traits)) {
file_names <- list.files(paste(dir, "Phenotypic Data Analysis/output/", traits[i], sep = ""), pattern = "emmeans_genet", full.names = T)
files <- lapply(file_names, read.table, header = T)
files <- files[! grepl("transformed", files)]
# create empty list
files_ed <- list()
for (j in 1:length(files)) {
file <- files[[j]]
colnames(file)[3] <- "emmean"
file <- file %>% mutate(famID_plantID3 = paste(famID, "_", plantID3, sep = "")) %>%
dplyr::select(famID_plantID3, emmean)
file <- inner_join(file, backbone1, by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>% filter(! is.na(longID))
colnames(file)[2] <- paste(substr(traits[i], 1, 12), "_", env_names[j], sep = "") # determines length of trait name included
files_ed[[j]] <- file
}
# now combine into one
file1 <- left_join(files_ed[[1]], files_ed[[2]], by = "longID")
file2 <- left_join(file1, files_ed[[3]], by = "longID")
file3 <- left_join(file2, files_ed[[4]], by = "longID")
file4 <- arrange(file3, longID)
all <- file4
output[[i]] <- all
}
# join together
phenotypes1 <- left_join(output[[1]], output[[2]], by = "longID")
phenotypes2 <- left_join(phenotypes1, output[[3]], by = "longID")
phenotypes3 <- left_join(phenotypes2, output[[4]], by = "longID")
phenotypes4 <- left_join(phenotypes3, output[[5]], by = "longID")
phenotypes5 <- left_join(phenotypes4, output[[6]], by = "longID")
all_phenotypes <- left_join(phenotypes5, output[[7]], by = "longID")
# join together
phenotypes1 <- left_join(output[[1]], output[[2]], by = "longID")
phenotypes2 <- left_join(phenotypes1, output[[3]], by = "longID")
phenotypes3 <- left_join(phenotypes2, output[[4]], by = "longID")
# join together
phenotypes1 <- left_join(output[[1]], output[[2]], by = "longID")
phenotypes2 <- left_join(phenotypes1, output[[3]], by = "longID")
colnames(all_phenotypes)
all_phenotypes <- left_join(phenotypes1, output[[3]], by = "longID")
all_phenotypes
colnames(all_phenotypes)
# round to 3 digits
all_phenotypes_round <- all_phenotypes
for (i in 1:nrow(all_phenotypes)) {
row <- unlist(all_phenotypes[i,-1])
row_ed <- round(row, digits = 2)
all_phenotypes_round[i,-1] <- row_ed
}
# create directory for qua files
dir_qua <- c(paste(out_path, "/qua_files/", sep = ""))
dir.create(dir_qua)
setwd(dir_qua)
# retrieve order of individuals from loc files to make sure they match
name_order <- list()
for (j in 1:length(famID)) {
loc <- read.table(paste(dir, "Preparing .qua Files for MapQTL/data/", famID[j], "_chr1.txt", sep = ""), skip = 7, fill = TRUE)
line <- which(grepl("individual", loc$V1)) # find where the individual names start
names <- slice(loc, (line+1):nrow(loc)) %>% dplyr::select(V1) # extract them
name_order[[j]] <- names
}
# separate out each file into families, order them, and write them out
for (j in 1:length(famID)) {
all_phenotypes_fam <- all_phenotypes_round %>% filter(grepl(famID[j], longID)) # just take those from one family at a time
target <- name_order[[j]] #
colnames(target) <- c("longID")
all_phenotypes_fam_target_order <- left_join(target, all_phenotypes_fam, by = "longID") # reorder using left_join
print(summary(target$longID == all_phenotypes_fam_target_order$longID)) # make sure they're matching, print to console
all_phenotypes_fam_target_order[is.na(all_phenotypes_fam_target_order)] <- c("*") # if it's NA, change to *
write.table(paste("ntrt = ", ncol(all_phenotypes_fam_target_order), sep = "" ), # start writing out the files, with all the required components
paste(dir_qua, famID[j], ".qua", sep = ""), row.names = F, col.names = F, quote = F, sep = "\t")
write.table(paste("nind = ", nrow(all_phenotypes_fam_target_order), sep = "" ),
paste(dir_qua, famID[j], ".qua", sep = ""), row.names = F, col.names = F, quote = F, sep = "\t", append = T)
write.table(paste("miss = *", sep = "" ),
paste(dir_qua, famID[j], ".qua", sep = ""), row.names = F, col.names = F, quote = F, sep = "\t", append = T)
cat("\n", file= paste(dir_qua, famID[j], ".qua", sep = ""), append=TRUE)
colnames(all_phenotypes_fam_target_order)[1] <- "nr"
trait_names <- colnames(all_phenotypes_fam_target_order)
for (i in 1:length(trait_names)) {
write.table(trait_names[i], paste(dir_qua, famID[j], ".qua", sep = ""), quote = F, row.names = F, col.names = F, sep = "\t", append = T)
}
cat("\n", file= paste(dir_qua, famID[j], ".qua", sep = ""), append=TRUE)
write.table(all_phenotypes_fam_target_order, paste(dir_qua, famID[j], ".qua", sep = ""), quote = F, row.names = F, col.names = F, sep = "\t", append = T)
}
# set paths
dir <- "/Users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Shattering and Threshability/Scripts for Github/"
folder <- "QTL Linkage Mapping"
#### Step 1: Summarizing Permutation Tests ####
# read in all permutation test files
files <- list.files(paste(dir, folder, "data", sep = "/"), full.names = T)
# set iteration vectors
famID <- c("WGN07", "WGN15", "WGN26", "WGN36", "WGN38", "WGN39", "WGN45", "WGN46", "WGN55", "WGN63")
trait <- c("rachis_breaks_mean", "floret_score_mean", "threshability")
env <- c("stp17", "stp18", "tli17", "tli18")
# make an empty dataframe nested in a list
output <- data.frame(famID = c("combined", famID), stp17 = NA, stp18 = NA, tli17 = NA, tli18 = NA, stringsAsFactors = FALSE)
LOD_thresh_list <- replicate(length(trait), output, simplify = FALSE)
# make tables of LOD thresholds
for (i in 1:length(trait)) {
for (e in 1:length(env)) {
files <- list.files(paste(dir, folder, "data", trait[i], "permutation_test/", sep = "/"), pattern = paste(trait[i], "_", env[e], sep = ""), full.names = T)
if (length(files == 11)) {
for (f in 1:length(files)) {
permutation_test <- read.table(files[f], header = T, fill = T)
LOD <- permutation_test %>% filter(Group == "GW") %>%
mutate(Rel.cum.count = as.numeric(as.character(Rel.cum.count))) %>%
filter(Rel.cum.count > 0.90 & Rel.cum.count < 0.98) %>%
dplyr::select(Interval)
LOD_thresh_list[[i]][f, (e+1)] <- mean(LOD[,1])
}
}
}
}
LOD_thresh_list
# some values are NA for whatever reason
# edit these to be the average of the families for that loc/trait
LOD_thresh_list[[3]][6, 2] <- mean(LOD_thresh_list[[3]][,2][-1], na.rm = T)
#### Step 2: Find 2-LOD Peaks for Families ####
# must manually iterate through each trait, then each environment all the way through writing out the results
# set trait
traits <- c("rachis_breaks_mean", "floret_score_mean", "threshability")
trait <- "rachis_breaks_mean"
# set env
env <- "stp17" # stp17, stp18, tli17, tli18
# load in results
rmqm <- read.csv(paste(dir, folder, "/data/", trait, "/rmqm/", trait, "_", env, "_rmqm.csv", sep = ""), header = T,
na.strings = c(" ", ""))
# prepare the LOD_thresh_list based on what trait is being investigated
if (trait == "rachis_breaks_mean") {
df <- LOD_thresh_list[[1]] }
if (trait == "floret_score_mean") {
df <- LOD_thresh_list[[2]] }
if (trait == "threshability") {
df <- LOD_thresh_list[[3]] }
df_env <- df[,paste(env, sep = "")]
LOD_family <- df_env[-1] # remove combined for this instance
LOD_combined <- df_env[1] # keep only combined
# select necessary columns
rmqm_mapping <- rmqm %>%
dplyr::select(Group, Position, Locus, Combined.LOD, WGN07_dh.LOD, WGN15_dh.LOD, WGN26_dh.LOD, WGN36_dh.LOD,
WGN39_dh.LOD, WGN46_dh.LOD, WGN55_dh.LOD, WGN45_dh.LOD, WGN38_dh.LOD, WGN63_dh.LOD) %>%
mutate(Group = as.factor(Group),
Position = as.numeric(Position)) %>%
filter(Position >= 0)
famID <- c("WGN07", "WGN15", "WGN26", "WGN36", "WGN38", "WGN39", "WGN45", "WGN46", "WGN55", "WGN63")
##########################################
# BUT for feekes_coded in stp 17 and stp18, we have to adjust for the two families that couldn't be mapped
if (trait == "feekes_coded" & env %in% c("stp17", "stp18")) {
rmqm_mapping <- rmqm %>%
dplyr::select(Group, Position, Locus, Combined.LOD, WGN07_dh.LOD, WGN15_dh.LOD, WGN26_dh.LOD, WGN36_dh.LOD,
WGN46_dh.LOD, WGN55_dh.LOD, WGN45_dh.LOD, WGN63_dh.LOD) %>%
mutate(Group = as.factor(Group),
Position = as.numeric(Position)) %>%
filter(Position >= 0)
famID <- c("WGN07", "WGN15", "WGN26", "WGN36", "WGN45", "WGN46", "WGN55", "WGN63")
}
# create output dataframes
groups <- data.frame(lg = rep(1:21, 2), map = c(rep("CP", 21), rep("DP", 21))) %>% mutate(group = paste(lg, map, sep = "_"))
result_list <- list()
# loop
for (j in 1:length(famID)) {
# empty the result frame
result <- groups %>%
mutate(left = NA,
center = NA,
right = NA,
max_lod = NA,
locus = NA)
# then iterate through groups
for (i in 1:nrow(groups)) {
group <- rmqm_mapping %>%
dplyr::select(Position, Group, Locus, paste(famID[j], "_dh.LOD", sep = "")) %>%
filter(Group == groups$group[i])
if (nrow(group) > 1) {
if (max(group[,4], na.rm = T) >= LOD_family[j]) {
peak <- group[which.max(group[,4]),]
max_lod <- peak[,4]
locus <- as.character(peak$Locus)
center <- peak[,1] # record peak position
LOD_drop <- peak[,4] - 2 # two LOD dropoff
LOD_drop_less <- group %>% filter(.[,4] < LOD_drop & .[,4] > 0) # find positions that are less than the dropoff
LOD_drop_id <- LOD_drop_less %>%
mutate(proximity_abs = abs(Position - center)) %>%
mutate(proximity = Position - center) %>%
arrange(proximity_abs) # find positions closest to "center"
if (nrow(LOD_drop_id) == 0) { # if there are not any instances where LOD dropoff gets below the threshold
right <- min(group$Position) # take the min and max positions for that group
left <- max(group$Position) }
else { # the first row should be one side of the peak, if negative, left, if positive right
LOD_drop_id_pn <- LOD_drop_id %>%
mutate(pos_neg = ifelse(proximity < 0, "neg", ifelse(proximity > 0, "pos", NA))) %>%
rownames_to_column("row_number")
if (LOD_drop_id_pn$pos_neg[1] == "neg") {
left <-  LOD_drop_id_pn$Position[1]
right_id  <- LOD_drop_id_pn %>% filter(pos_neg == "pos")
if (length(right_id$row_number) == 0) {right <- center}
else {right <- right_id[1,2]}
}
else if (LOD_drop_id_pn$proximity[1] > 0) {
right <- LOD_drop_id_pn$Position[1]
left_id  <- LOD_drop_id_pn %>% filter(pos_neg == "neg")
if (length(left_id$row_number) == 0) {left <- "0"}
else {left <- left_id[1,2]}
}
}
# export results
result$left[i] <- left
result$center[i] <- center
result$right[i] <- right
result$max_lod[i] <- max_lod
result$locus[i] <- locus
}
}
}
result_list[[j]] <- result
result_list[[j]]$famID <- famID[j]
}
# load in the map and calculate max positions
map <- read.table("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Shattering and Threshability/Scripts for Github/QTL Linkage Mapping/data/no_group_inverted.map", header = F)
map
colnames(map) <- c("marker", "pos")
# load in the map and calculate max positions
map <- read.table("/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Shattering and Threshability/Scripts for Github/QTL Linkage Mapping/data/no_group_inverted.map", header = F)
colnames(map) <- c("marker", "pos")
max_pos <- map %>% mutate(chrom = as.numeric(substr(marker, 4, 5))) %>% group_by(chrom) %>% summarise(max(pos)) %>% as.data.frame()
head(lod_intervals_final) # watch what happens to 9
for (i in 1:nrow(lod_intervals_final)) {
if (lod_intervals_final$lg[i] %in% invert) {
conversion_factor <- max_pos %>% filter(chrom  == lod_intervals_final$lg[i]) %>% as.data.frame()
conversion_factor <- conversion_factor$`max(pos)`
lod_intervals_final$left[i] <- abs(conversion_factor - as.numeric(lod_intervals_final$left[i]))
lod_intervals_final$center[i] <- abs(conversion_factor - as.numeric(lod_intervals_final$center[i]))
lod_intervals_final$right[i] <- abs(conversion_factor - as.numeric(lod_intervals_final$right[i]))
}
}
head(lod_intervals_final)
for (i in 1:nrow(lod_intervals_final)) {
interval <- c(lod_intervals_final$left[i], lod_intervals_final$center[i], lod_intervals_final$right[i])
interval_sorted <- sort(interval)
lod_intervals_final$left[i] <- interval_sorted[1]
lod_intervals_final$center[i] <- interval_sorted[2]
lod_intervals_final$right[i] <- interval_sorted[3]
}
#### write out all results
write.csv(lod_intervals_final, paste(dir, folder, "/output", "/lod_intervals_final.csv", sep = ""), row.names = F)
indiv_fam
# script we're on
folder <- c("/Visualize Results")
traits <- c("rachis_breaks_mean", "flroet_score_mean", "threshability")
traits <- c("emergence_percent", "anthesis_score")
year <- c("2017", "2018", "2017", "2018")
loc <- c("STP", "STP", "TLI", "TLI")
#### Step 1: Read in GWAS Results ####
files <- list.files(paste(dir, "GWAS/output/GAPIT/anthesis_score/", sep = "/"), pattern = "GWAS.Results.csv", full.names = T)
anthesis_score <- lapply(files, read.csv)
files <- list.files(paste(dir, "GWAS/output/GAPIT/rachis_breaks_mean/", sep = "/"), pattern = "GWAS.Results.csv", full.names = T)
rachis_breaks_mean <- lapply(files, read.csv)
rachis_breaks_mean
